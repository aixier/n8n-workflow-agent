#!/usr/bin/env python3
"""
示例: 创建YouTube视频处理工作流
演示如何使用n8n Workflow Agent创建复杂的工作流
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from tools.node_builder import NodeBuilder
from tools.n8n_workflow_manager import N8nWorkflowManager
import json


def create_youtube2post_workflow():
    """创建YouTube转文章工作流"""

    print("🚀 Creating YouTube2Post Workflow...")

    # 初始化节点构建器
    builder = NodeBuilder()

    # 1. 创建Webhook触发器
    webhook = builder.create_node('webhook', {
        'name': 'YouTube URL Input',
        'parameters': {
            'path': '/youtube2post',
            'method': 'POST',
            'responseMode': 'responseNode',
            'options': {
                'responseContentType': 'application/json'
            }
        }
    })

    # 2. 验证输入
    validate_input = builder.create_node('code', {
        'name': 'Validate Input',
        'parameters': {
            'jsCode': """
// 验证输入数据
const items = $input.all();
const errors = [];

items.forEach(item => {
    const data = item.json;

    // 检查必需字段
    if (!data.url) {
        errors.push('URL is required');
    } else if (!data.url.includes('youtube.com') && !data.url.includes('youtu.be')) {
        errors.push('Invalid YouTube URL');
    }

    // 设置默认值
    item.json = {
        ...data,
        language: data.language || 'en',
        quality: data.quality || 'high',
        screenshots: data.screenshots !== false,
        timestamp: new Date().toISOString()
    };
});

if (errors.length > 0) {
    throw new Error(errors.join(', '));
}

return items;
"""
        }
    })

    # 3. 提取视频ID
    extract_video_id = builder.create_node('code', {
        'name': 'Extract Video ID',
        'parameters': {
            'jsCode': """
// 从URL提取视频ID
const items = $input.all();

return items.map(item => {
    const url = item.json.url;
    let videoId = '';

    // 处理不同格式的YouTube URL
    if (url.includes('youtube.com/watch?v=')) {
        videoId = url.split('v=')[1].split('&')[0];
    } else if (url.includes('youtu.be/')) {
        videoId = url.split('youtu.be/')[1].split('?')[0];
    }

    return {
        json: {
            ...item.json,
            videoId: videoId,
            downloadUrl: `https://www.youtube.com/watch?v=${videoId}`
        }
    };
});
"""
        }
    })

    # 4. 下载视频信息（模拟）
    download_info = builder.create_node('http', {
        'name': 'Get Video Info',
        'parameters': {
            'method': 'GET',
            'url': '=https://www.youtube.com/oembed?url={{$json.downloadUrl}}&format=json',
            'options': {
                'timeout': 10000
            }
        }
    })

    # 5. 处理视频（这里简化为代码节点）
    process_video = builder.create_node('code', {
        'name': 'Process Video',
        'parameters': {
            'jsCode': """
// 模拟视频处理
const items = $input.all();

return items.map(item => {
    const videoInfo = item.json;

    // 模拟提取的数据
    const processedData = {
        ...videoInfo,
        title: videoInfo.title || 'Untitled Video',
        author: videoInfo.author_name || 'Unknown',
        duration: Math.floor(Math.random() * 600) + 60, // 模拟时长
        quotes: [
            {
                text: "This is an important quote from the video",
                timestamp: "00:01:23",
                confidence: 0.95
            },
            {
                text: "Another meaningful statement",
                timestamp: "00:03:45",
                confidence: 0.88
            }
        ],
        summary: "This is an AI-generated summary of the video content.",
        tags: ["education", "technology", "tutorial"],
        processedAt: new Date().toISOString()
    };

    return {
        json: processedData
    };
});
"""
        }
    })

    # 6. 生成文章
    generate_article = builder.create_node('code', {
        'name': 'Generate Article',
        'parameters': {
            'jsCode': """
// 生成Markdown文章
const items = $input.all();

return items.map(item => {
    const data = item.json;

    // 生成Markdown格式的文章
    const article = `# ${data.title}

**Author**: ${data.author}
**Duration**: ${Math.floor(data.duration / 60)}:${(data.duration % 60).toString().padStart(2, '0')}
**Processed**: ${data.processedAt}

## Summary

${data.summary}

## Key Quotes

${data.quotes.map(q => `> "${q.text}" - [${q.timestamp}]`).join('\\n\\n')}

## Tags

${data.tags.map(tag => `#${tag}`).join(' ')}

---

*Generated by YouTube2Post Workflow*
`;

    return {
        json: {
            ...data,
            article: article,
            wordCount: article.split(' ').length,
            success: true
        }
    };
});
"""
        }
    })

    # 7. 准备响应
    prepare_response = builder.create_node('code', {
        'name': 'Prepare Response',
        'parameters': {
            'jsCode': """
// 准备最终响应
const items = $input.all();
const data = items[0].json;

return [{
    json: {
        success: true,
        message: "Video processed successfully",
        data: {
            videoId: data.videoId,
            title: data.title,
            wordCount: data.wordCount,
            quotesCount: data.quotes.length,
            article: data.article
        },
        timestamp: new Date().toISOString()
    }
}];
"""
        }
    })

    # 8. 发送响应
    respond = builder.create_node('respond', {
        'name': 'Send Response',
        'parameters': {
            'respondWith': 'json',
            'responseBody': '={{$json}}',
            'options': {
                'responseCode': 200
            }
        }
    })

    # 9. 错误处理
    error_handler = builder.create_node('respond', {
        'name': 'Error Response',
        'position': [850, 500],
        'parameters': {
            'respondWith': 'json',
            'responseBody': '={{ {"success": false, "error": "Processing failed", "timestamp": new Date().toISOString()} }}',
            'options': {
                'responseCode': 500
            }
        }
    })

    # 连接节点
    print("🔗 Connecting nodes...")
    builder.chain_nodes([
        webhook['id'],
        validate_input['id'],
        extract_video_id['id'],
        download_info['id'],
        process_video['id'],
        generate_article['id'],
        prepare_response['id'],
        respond['id']
    ])

    # 构建工作流
    workflow = builder.build_workflow(
        name="YouTube2Post Workflow",
        description="Convert YouTube videos to articles with AI"
    )

    print("✅ Workflow created successfully!")
    return workflow


def deploy_workflow(workflow):
    """部署工作流到n8n"""

    print("\n📤 Deploying workflow to n8n...")

    # 初始化管理器
    manager = N8nWorkflowManager()

    # 测试连接
    if not manager.test_connection():
        print("❌ Failed to connect to n8n. Please check your configuration.")
        return None

    # 创建工作流
    result = manager.create_workflow(workflow)

    if 'error' in result:
        print(f"❌ Failed to create workflow: {result['error']}")
        return None

    workflow_id = result.get('id')
    print(f"✅ Workflow created with ID: {workflow_id}")

    # 激活工作流
    if manager.deploy_workflow(workflow_id):
        print(f"✅ Workflow activated successfully!")
        print(f"🌐 Webhook URL: {manager.base_url}/webhook/youtube2post")
        return workflow_id
    else:
        print("❌ Failed to activate workflow")
        return None


def test_workflow(workflow_id=None):
    """测试工作流"""

    print("\n🧪 Testing workflow...")

    import requests

    # 测试数据
    test_data = {
        "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
        "language": "en",
        "quality": "high"
    }

    # 发送测试请求
    try:
        response = requests.post(
            "http://localhost:5678/webhook/youtube2post",
            json=test_data,
            timeout=30
        )

        if response.status_code == 200:
            print("✅ Test successful!")
            print("Response:", json.dumps(response.json(), indent=2))
        else:
            print(f"❌ Test failed with status code: {response.status_code}")
            print("Response:", response.text)
    except Exception as e:
        print(f"❌ Test failed: {e}")


def main():
    """主函数"""

    print("=" * 60)
    print("YouTube2Post Workflow Creator")
    print("=" * 60)

    # 创建工作流
    workflow = create_youtube2post_workflow()

    # 保存到文件
    output_file = "youtube2post_workflow.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(workflow, f, indent=2, ensure_ascii=False)
    print(f"\n💾 Workflow saved to: {output_file}")

    # 询问是否部署
    deploy = input("\n🚀 Deploy workflow to n8n? (y/n): ")
    if deploy.lower() == 'y':
        workflow_id = deploy_workflow(workflow)

        if workflow_id:
            # 询问是否测试
            test = input("\n🧪 Test the workflow? (y/n): ")
            if test.lower() == 'y':
                test_workflow(workflow_id)

    print("\n✨ Done!")


if __name__ == "__main__":
    main()