#!/bin/bash

# n8n Workflow Agent Quick Start Script
# Âø´ÈÄüÂêØÂä®ÂíåÈÖçÁΩÆËÑöÊú¨

set -e

echo "=========================================="
echo "n8n Workflow Agent - Quick Start"
echo "=========================================="
echo ""

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Ê£ÄÊü•PythonÁâàÊú¨
check_python() {
    echo "üîç Checking Python version..."
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
        echo -e "${GREEN}‚úì${NC} Python $PYTHON_VERSION found"

        # Ê£ÄÊü•ÁâàÊú¨ÊòØÂê¶>=3.8
        if python3 -c 'import sys; exit(0 if sys.version_info >= (3,8) else 1)'; then
            echo -e "${GREEN}‚úì${NC} Python version is compatible"
        else
            echo -e "${RED}‚úó${NC} Python 3.8+ is required"
            exit 1
        fi
    else
        echo -e "${RED}‚úó${NC} Python3 not found. Please install Python 3.8+"
        exit 1
    fi
}

# ÂÆâË£Ö‰æùËµñ
install_dependencies() {
    echo ""
    echo "üì¶ Installing dependencies..."

    if [ -f "requirements.txt" ]; then
        pip3 install -r requirements.txt --quiet
        echo -e "${GREEN}‚úì${NC} Dependencies installed"
    else
        echo -e "${RED}‚úó${NC} requirements.txt not found"
        exit 1
    fi
}

# ÈÖçÁΩÆÁéØÂ¢É
setup_environment() {
    echo ""
    echo "‚öôÔ∏è  Setting up environment..."

    # Ê£ÄÊü•.envÊñá‰ª∂
    if [ ! -f "config/.env" ]; then
        if [ -f "config/.env.example" ]; then
            cp config/.env.example config/.env
            echo -e "${YELLOW}!${NC} Created config/.env from template"
            echo "   Please edit config/.env and set your n8n API key"
        else
            echo -e "${RED}‚úó${NC} config/.env.example not found"
            exit 1
        fi
    else
        echo -e "${GREEN}‚úì${NC} config/.env already exists"
    fi

    # ÂàõÂª∫ÂøÖË¶ÅÁöÑÁõÆÂΩï
    mkdir -p logs data backups temp
    echo -e "${GREEN}‚úì${NC} Created necessary directories"
}

# ÊµãËØïn8nËøûÊé•
test_connection() {
    echo ""
    echo "üîå Testing n8n connection..."

    # Ê£ÄÊü•ÊòØÂê¶ËÆæÁΩÆ‰∫ÜAPIÂØÜÈí•
    if grep -q "your_api_key_here" config/.env; then
        echo -e "${YELLOW}!${NC} n8n API key not configured"
        echo ""
        read -p "Enter your n8n API key (or press Enter to skip): " API_KEY

        if [ ! -z "$API_KEY" ]; then
            # Êõ¥Êñ∞.envÊñá‰ª∂
            if [[ "$OSTYPE" == "darwin"* ]]; then
                # macOS
                sed -i '' "s/your_api_key_here/$API_KEY/" config/.env
            else
                # Linux
                sed -i "s/your_api_key_here/$API_KEY/" config/.env
            fi
            echo -e "${GREEN}‚úì${NC} API key configured"
        else
            echo -e "${YELLOW}!${NC} Skipping connection test"
            return
        fi
    fi

    # ÊµãËØïËøûÊé•
    python3 -c "
import sys
sys.path.append('.')
from tools.n8n_workflow_manager import N8nWorkflowManager
manager = N8nWorkflowManager()
if manager.test_connection():
    print('\033[0;32m‚úì\033[0m Successfully connected to n8n')
else:
    print('\033[0;31m‚úó\033[0m Failed to connect to n8n')
    print('  Please check your n8n instance is running and API key is correct')
" 2>/dev/null || echo -e "${YELLOW}!${NC} Connection test skipped"
}

# ËøêË°åÁ§∫‰æã
run_example() {
    echo ""
    echo "üéØ Would you like to run an example? (y/n)"
    read -p "> " RUN_EXAMPLE

    if [ "$RUN_EXAMPLE" = "y" ] || [ "$RUN_EXAMPLE" = "Y" ]; then
        echo ""
        echo "üìã Available examples:"
        echo "1. Create YouTube workflow"
        echo "2. Analyze existing workflow"
        echo "3. Run test suite"

        read -p "Select an example (1-3): " EXAMPLE

        case $EXAMPLE in
            1)
                echo "Running YouTube workflow example..."
                cd examples && python3 create_youtube_workflow.py
                ;;
            2)
                echo "Workflow analysis example..."
                if [ -f "templates/workflow_config.json" ]; then
                    python3 tools/workflow_analyzer.py templates/workflow_config.json
                else
                    echo -e "${RED}‚úó${NC} Template workflow not found"
                fi
                ;;
            3)
                echo "Running test suite..."
                if [ -f "templates/test_scenarios.json" ]; then
                    python3 tools/test_runner.py templates/test_scenarios.json --format markdown
                else
                    echo -e "${RED}‚úó${NC} Test scenarios not found"
                fi
                ;;
            *)
                echo "Invalid selection"
                ;;
        esac
    fi
}

# ÊòæÁ§∫‰∏ã‰∏ÄÊ≠•
show_next_steps() {
    echo ""
    echo "=========================================="
    echo -e "${GREEN}‚úÖ Setup Complete!${NC}"
    echo "=========================================="
    echo ""
    echo "üìö Next steps:"
    echo ""
    echo "1. Configure n8n connection:"
    echo "   nano config/.env"
    echo ""
    echo "2. Test connection:"
    echo "   python3 tools/n8n_workflow_manager.py test"
    echo ""
    echo "3. Create your first workflow:"
    echo "   python3 examples/create_youtube_workflow.py"
    echo ""
    echo "4. Read the documentation:"
    echo "   cat README.md"
    echo ""
    echo "5. Explore the analysis modules:"
    echo "   ls docs/"
    echo ""
    echo "For more help, see: https://github.com/ai-terminal/n8n-workflow-agent"
    echo ""
}

# ‰∏ªÊµÅÁ®ã
main() {
    # ÂàáÊç¢Âà∞È°πÁõÆÁõÆÂΩï
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    cd "$SCRIPT_DIR/.."

    check_python
    install_dependencies
    setup_environment
    test_connection
    run_example
    show_next_steps
}

# ËøêË°å‰∏ªÊµÅÁ®ã
main